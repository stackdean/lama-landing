{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\nimport styled from \"styled-components\";\nconst ListWrapper = styled.ul.withConfig({\n  displayName: \"List__ListWrapper\",\n  componentId: \"sc-1kb6hbf-0\"\n})([\"margin:0;padding:0;list-style:none;\"]);\nconst ListItemWrapper = styled.li.withConfig({\n  displayName: \"List__ListItemWrapper\",\n  componentId: \"sc-1kb6hbf-1\"\n})([\"\"]);\nexport const List = (_ref) => {\n  let {\n    children\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"children\"]);\n\n  const AllClasses = [\"list\"];\n\n  if (props.className) {\n    AllClasses.push(props.className);\n  }\n\n  return __jsx(ListWrapper, _extends({}, props, {\n    className: AllClasses.join(\" \")\n  }), children);\n};\nexport const ListItem = (_ref2) => {\n  let {\n    children\n  } = _ref2,\n      props = _objectWithoutProperties(_ref2, [\"children\"]);\n\n  const AllClasses = [\"list__item\"];\n\n  if (props.className) {\n    AllClasses.push(props.className);\n  }\n\n  return __jsx(ListItemWrapper, _extends({}, props, {\n    className: AllClasses.join(\" \")\n  }), children);\n};","map":null,"metadata":{},"sourceType":"module"}