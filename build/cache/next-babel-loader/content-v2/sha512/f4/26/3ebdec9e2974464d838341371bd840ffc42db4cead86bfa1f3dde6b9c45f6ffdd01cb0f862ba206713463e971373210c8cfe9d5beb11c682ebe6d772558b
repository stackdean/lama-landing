{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useState } from \"react\";\nimport CountUp from \"react-countup\";\nimport VisibilitySensor from \"react-visibility-sensor\";\n\nconst Counter = (_ref) => {\n  let {\n    className\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"className\"]);\n\n  const {\n    0: viewPortEntered,\n    1: setViewPortEntered\n  } = useState(false);\n  return __jsx(CountUp, _extends({}, rest, {\n    start: viewPortEntered ? null : 0\n  }), ({\n    countUpRef\n  }) => {\n    return __jsx(VisibilitySensor, {\n      active: !viewPortEntered,\n      onChange: isVisible => {\n        if (isVisible) {\n          setViewPortEntered(true);\n        }\n      },\n      delayedCall: true\n    }, __jsx(\"span\", {\n      className: className,\n      ref: countUpRef\n    }));\n  });\n};\n\nexport default Counter;","map":null,"metadata":{},"sourceType":"module"}